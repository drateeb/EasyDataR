help(package = "EasyDataR")
use_r("EasyData_key_setup", file = "Easydata_key_setup")
?use_R
?use_r
use_r("EasyData_key_setup")
library(EasyDataR)
Easydata_key("C10D3D29160CE5693F56AA9846ABB2C438D8B112")
Easydata_key_setup("C10D3D29160CE5693F56AA9846ABB2C438D8B112")
library(EasyDataR)
Easydata_key_setup("C10D3D29160CE5693F56AA9846ABB2C438D8B112")
EasyData_key_setup("C10D3D29160CE5693F56AA9846ABB2C438D8B112")
library(EasyDataR)
EasyData_key_setup("C10D3D29160CE5693F56AA9846ABB2C438D8B112")
library(EasyDataR)
EasyData_key_setup("C10D3D29160CE5693F56AA9846ABB2C438D8B112")
Easyaata_key_setup("C10D3D29160CE5693F56AA9846ABB2C438D8B112")
Easydata_key_setup("C10D3D29160CE5693F56AA9846ABB2C438D8B112")
library(EasyDataR)
Easydata_key_setup("C10D3D29160CE5693F56AA9846ABB2C438D8B112")
Easydata_key_setup <- function(Easydata_key){
EasyData_key<-"Easydata_key"
return(EasyData_API_key_entered)
}
Easydata_key_setup("C10D3D29160CE5693F56AA9846ABB2C438D8B112")
Easydata_key_setup(C10D3D29160CE5693F56AA9846ABB2C438D8B112)
Easydata_key_setup <- function(Easydata_key){
EasyData_key<-"Easydata_key"
}
Easydata_key_setup(C10D3D29160CE5693F56AA9846ABB2C438D8B112)
Easydata_key
Easydata_key_setup <- function(Easydata_key){
EasyData_key <- "Easydata_key"
return(Easydata_key)
}
Easydata_key_setup(C10D3D29160CE5693F56AA9846ABB2C438D8B112)
Easydata_key_setup("C10D3D29160CE5693F56AA9846ABB2C438D8B112")
Easydata_key
alidate_api_key <- function(api_key) {
# Check if the input is a string
if (!is.character(api_key)) {
stop("The function only accepts API key as a string.")
}
# Check if the input is a valid API key (you can add more conditions as needed)
if (nchar(api_key) < 10) {
stop("Invalid API key. Please provide a valid API key as a string.")
}
# If it's a valid API key, return a message and an object
return(list(message = "API key verified", Easydata_key = api_key))
}
validate_api_key(a)
validate_api_key <- function(api_key) {
# Check if the input is a string
if (!is.character(api_key)) {
stop("The function only accepts API key as a string.")
}
# Check if the input is a valid API key (you can add more conditions as needed)
if (nchar(api_key) < 10) {
stop("Invalid API key. Please provide a valid API key as a string.")
}
# If it's a valid API key, return a message and an object
return(list(message = "API key verified", Easydata_key = api_key))
}
validate_api_key(a)
validate_api_key(123)
validate_api_key("123")
count(C10D3D29160CE5693F56AA9846ABB2C438D8B112)
# Check if the input is a string
if (!is.character(api_key)) {
stop("The function only accepts API key as a string.")
}
validate_api_key("C10D3D29160CE5693F56AA9846ABB2C438D8B11)
validate_api_key("C10D3D29160CE5693F56AA9846ABB2C438D8B11")
validate_api_key("C10D3D29160CE5693F56AA9846ABB2C438D8B11")
validate_api_key("C10D3D29160CE5693F56AA9846ABB2C438D8B112")
Easydata_key
validate_api_key <- function(api_key) {
# Check if the input is a string
if (!is.character(api_key)) {
stop("The function only accepts API key as a string.")
}
# Check if the input is a valid API key (you can add more conditions as needed)
if (nchar(api_key) < 40) {
stop("Invalid API key. Please provide a valid API key as a string.")
}
# If it's a valid API key, return a message and an object
return(message = "API key verified")
return(Easydata_key = api_key)
}
validate_api_key("C10D3D29160CE5693F56AA9846ABB2C438D8B112")
Easydata_key
store_api_key <- function(api_key) {
# Check if the input is a string
if (!is.character(api_key)) {
stop("The function only accepts API key as a string.")
}
# Check if the API key has exactly 40 characters
if (nchar(api_key) == 40) {
Easydata_key <<- api_key  # Store API key in the global environment
return("API key verified")
} else if (nchar(api_key) < 40) {
return("The API key entered has less than 40 characters. Check again.")
} else {
return("The API key entered has more than 40 characters. Check again.")
}
}
# Example usage:
api_key <- "C10D3D29160CE5693F56AA9846ABB2C438D8B112"
result <- store_api_key(api_key)
print(result)  # It will print "API key verified" or an appropriate error message
# Access the stored API key using Easydata_key
print(Easydata_key)
# Example usage:
api_key <- "C103D29160CE5693F56AA9846ABB2C438D8B112"
result <- store_api_key(api_key)
# Example usage:
api_key <- "C103D29160CEasd5693F56AA9846ABB2C438D8B112"
result <- store_api_key(api_key)
print(result)  # It will print "API key verified" or an appropriate error message
# Example usage:
api_key <- "C103D29160CEasd5693F56AA9846ABB2C438D8B112"
store_api_key(api_key)
# Example usage:
api_key <- "C103D29160CEasd5693F56AA9846ABB2CB112"
store_api_key(api_key)
# Example usage:
api_key <- "C103D29160CEawesd5693F56AA9846ABB2CB112"
# Example usage:
api_key <- "C10D3D29160CE5693F56AA9846ABB2C438D8B112"
store_api_key(api_key)
# Access the stored API key using Easydata_key
print(Easydata_key)
library(EasyDataR)
EasyData_key_setup(C11D3D29161CE5693F55AA9846ABB2C438D8B112)
EasyData_key_setup("C11D3D29161CE5693F55AA9846ABB2C438D8B112")
EasyData_key_setup("C11D3D29161CE5693F55AA9846ABB2C438D8B12")
EasyData_key_setup("C11D3D29161CE5693F55AA9846ABB2C438D8B1aa2")
download_series("TS_GP_RL_LSM1516_M.LSM000160000","C10D3D29160CE5693F56AA9846ABB2C438D8B112", ,"2023-11-30", "csv")
download_series <-
function(Series_ID,Easydata_Key,Start_date = NULL,End_date = NULL,File_type = NULL) {
series<-paste0("https://easydata.sbp.org.pk/api/v1/series/",Series_ID,"/data?api_key=",Easydata_key,"&start_date=",Start_date,"&end_date=",End_date,"&format=",File_type,"")
series<-read.csv(series, stringsAsFactors =  F)
return(series)
}
download_series("TS_GP_RL_LSM1516_M.LSM000160000","C10D3D29160CE5693F56AA9846ABB2C438D8B112", ,"2023-11-30", "csv")
download_series("TS_GP_RL_LSM1516_M.LSM000160000","C10D3D29160CE5693F56AA9846ABB2C438D8B112","2023-11-30", "csv")
download_series("TS_GP_RL_LSM1516_M.LSM000160000","C10D3D29160CE5693F56AA9846ABB2C438D8B112", "2016-06-01" ,"2023-11-30", "csv")
# REPLACE API KEY WITH YOUR KEY
download_series <- function(Series_ID,Easydata_Key,Start_date = NULL,End_date = NULL,File_type = NULL) {
series<-paste0("https://easydata.sbp.org.pk/api/v1/series/",Series_ID,"/data?api_key=",Easydata_key,"&start_date=",Start_date,"&end_date=",End_date,"&format=",File_type,"")
series<-read.csv(series, stringsAsFactors =  F)
return(series)
}
download_series("TS_GP_RL_LSM1516_M.LSM000160000","C10D3D29160CE5693F56AA9846ABB2C438D8B112", "2016-06-01" ,"2023-11-30", "csv")
# REPLACE API KEY WITH YOUR KEY
download_series <- function(Series_ID,Easydata_Key,Start_date = NULL,End_date = NULL,File_type = NULL) {
series<-paste0("https://easydata.sbp.org.pk/api/v1/series/",Series_ID,"/data?api_key=",Easydata_key,"&start_date=",Start_date,"&end_date=",End_date,"&format=",File_type,"")
series<-read.csv(series, stringsAsFactors =  F)
return(series)
}
download_series("TS_GP_IR_REPOMR_D.ORR","C10D3D29160CE5693F56AA9846ABB2C438D8B112", "2015-05-25" ,"2023-12-20", "csv")
Easydata_key<-"C10D3D29160CE5693F56AA9846ABB2C438D8B112"
download_series("TS_GP_IR_REPOMR_D.ORR",Easydata_key, "2015-05-25" ,"2023-12-20", "csv")
library(EasyDataR)
Easydata_key<-"C10D3D29160CE5693F56AA9846ABB2C438D8B112"
download_series("TS_GP_IR_REPOMR_D.ORR",Easydata_key, "2015-05-25" ,"2023-12-20", "csv")
# Converting the data into time-series and plotting
series
Ax<-download_series("TS_GP_IR_REPOMR_D.ORR",Easydata_key, "2015-05-25" ,"2023-12-20", "csv")
# Converting the data into time-series and plotting
Ax
make_time_series<- function(series) {
Ax$Date <- as.Date(Ax$Observation.Date, format = "%Y/%m/%d")  # Convert to Date type if not already
# Sort the dataset by the 'Date' column
sdate <- Ax[order(Ax$Date), ]
# Print the sorted dataset
print(sdate)
}
make_time_series(Ax)
library(lubridate)
Ax$Date <- ymd(Ax$Observation.Date)  # Convert to Date type if not already
make_time_series<- function(series) {
Ax$Date <- ymd(Ax$Observation.Date)  # Convert to Date type if not already
# Sort the dataset by the 'Date' column
sdate <- Ax[order(Ax$Date), ]
# Print the sorted dataset
print(sdate)
}
make_time_series(Ax)
make_time_series<- function(series) {
Ax$Date <- ymd(Ax$Observation.Date)  # Convert to Date type if not already
# Sort the dataset by the 'Date' column
sdate <- Ax[order(Ax$Date), ]
series<- cbind(sdate,Ax$Observation.Value)
# Print the sorted dataset
return(series)
}
make_time_series(Ax)
make_time_series<- function(series) {
Ax$Date <- ymd(Ax$Observation.Date)  # Convert to Date type if not already
# Sort the dataset by the 'Date' column
sorted_date_data <- Ax[order(Ax$Date), ]
# Print the sorted dataset
return(sorted_date_data)
}
make_time_series(Ax)
library(xts)
# Print the sorted dataset
series <- xts(sorted_date_data, order.by = sorted_date_data$Date)
make_time_series<- function(series) {
Ax$Date <- ymd(Ax$Observation.Date)  # Convert to Date type if not already
# Sort the dataset by the 'Date' column
sorted_date_data <- Ax[order(Ax$Date), ]
# Print the sorted dataset
series <- xts(sorted_date_data, order.by = sorted_date_data$Date)
}
make_time_series(Ax)
Ax
make_time_series<- function(series) {
Ax$Date <- ymd(Ax$Observation.Date)  # Convert to Date type if not already
# Sort the dataset by the 'Date' column
sorted_date_data <- Ax[order(Ax$Date), ]
# Print the sorted dataset
series <- xts(sorted_date_data, order.by = sorted_date_data$Date)
return(series)
}
make_time_series(Ax)
library(ggplot2)
make_time_series<- function(series) {
Ax$Date <- ymd(Ax$Observation.Date)  # Convert to Date type if not already
# Sort the dataset by the 'Date' column
sorted_date_data <- Ax[order(Ax$Date), ]
# Print the sorted dataset
series <- xts(sorted_date_data, order.by = sorted_date_data$Date)
return(series)
ggplot(series, aes(x = Date, y = Observation.Value)) +
geom_line()
}
ggplot(series, aes(x = Date, y = Observation.Value)) +
geom_line()
make_time_series<- function(series) {
Ax$Date <- ymd(Ax$Observation.Date)  # Convert to Date type if not already
# Sort the dataset by the 'Date' column
sorted_date_data <- Ax[order(Ax$Date), ]
# Print the sorted dataset
series <- xts(sorted_date_data, order.by = sorted_date_data$Date)
return(series)
}
series
make_time_series <- function(Ax) {
Ax$Date <- ymd(Ax$Observation.Date)  # Convert to Date type if not already
# Sort the dataset by the 'Date' column
sorted_date_data <- Ax[order(Ax$Date), ]
# Create time-series object
series <- xts(sorted_date_data$Observation.Value, order.by = sorted_date_data$Date)
# Plot the time series using ggplot2
ggplot(data = sorted_date_data, aes(x = Date, y = Observation.Value)) +
geom_line() +
ggtitle("Time Series Plot")
# Return the time series object
return(series)
}
# Example usage:
your_ax_dataframe <- data.frame(
Observation.Date = c("2023-01-01", "2023-02-01", "2023-03-01"),
Observation.Value = c(10, 20, 15)
)
result_series <- make_time_series(your_ax_dataframe)
# Now 'result_series' contains the time series data
print(result_series)
make_time_series <- function(Ax) {
Ax$Date <- ymd(Ax$Observation.Date)  # Convert to Date type if not already
# Sort the dataset by the 'Date' column
sorted_date_data <- Ax[order(Ax$Date), ]
# Create time-series object
series <- xts(sorted_date_data$Observation.Value, order.by = sorted_date_data$Date)
# Return the time series object
return(series)
}
result_series <- make_time_series(Ax)
# Now 'result_series' contains the time series data
print(result_series)
make_time_series <- function(Ax) {
Ax$Date <- ymd(Ax$Observation.Date)  # Convert to Date type if not already
# Sort the dataset by the 'Date' column
sorted_date_data <- Ax[order(Ax$Date), ]
# Create time-series object
series <- xts(sorted_date_data$Observation.Value, order.by = sorted_date_data$Date)
# Return the time series object
return(series)
print(series)
}
result_series <- make_time_series(Ax)
make_time_series(Ax)
make_time_series <- function(Ax) {
Ax$Date <- ymd(Ax$Observation.Date)  # Convert to Date type if not already
# Sort the dataset by the 'Date' column
sorted_date_data <- Ax[order(Ax$Date), ]
# Create time-series object
series <- xts(sorted_date_data$Observation.Value, order.by = sorted_date_data$Date)
# Return the time series object
return(series)
names(series) <- c("Date", "Variable")
print(series)
}
make_time_series(Ax)
names(series)
make_time_series <- function(Ax) {
Ax$Date <- ymd(Ax$Observation.Date)  # Convert to Date type if not already
# Sort the dataset by the 'Date' column
sorted_date_data <- Ax[order(Ax$Date), ]
# Create time-series object
series <- xts(sorted_date_data$Observation.Value, order.by = sorted_date_data$Date)
# Return the time series object
return(series)
names(series)
names(series) <- c("Date", "Variable")
print(series)
}
make_time_series(Ax)
make_time_series <- function(Ax) {
Ax$Date <- ymd(Ax$Observation.Date)  # Convert to Date type if not already
# Sort the dataset by the 'Date' column
sorted_date_data <- Ax[order(Ax$Date), ]
# Create time-series object
series <- xts(sorted_date_data$Observation.Value, order.by = sorted_date_data$Date)
# Return the time series object
return(series)
print(names(series))
names(series) <- c("Date", "Variable")
print(series)
}
make_time_series(Ax)
make_time_series <- function(Ax) {
Ax$Date <- ymd(Ax$Observation.Date)  # Convert to Date type if not already
# Sort the dataset by the 'Date' column
sorted_date_data <- Ax[order(Ax$Date), ]
# Create time-series object
series <- xts(sorted_date_data$Observation.Value, order.by = sorted_date_data$Date)
str(series)
# Return the time series object
return(series)
print(names(series))
names(series) <- c("Date", "Variable")
print(series)
}
make_time_series(Ax)
make_time_series <- function(Ax) {
Ax$Date <- ymd(Ax$Observation.Date)  # Convert to Date type if not already
# Sort the dataset by the 'Date' column
sorted_date_data <- Ax[order(Ax$Date), ]
# Create time-series object
series <- xts(sorted_date_data$Observation.Value, order.by = sorted_date_data$Date)
str(series)
# Return the time series object
return(series)
#print(names(series))
print(str(series))
#names(series) <- c("Date", "Variable")
print(series)
}
make_time_series(Ax)
make_time_series <- function(Ax) {
Ax$Date <- ymd(Ax$Observation.Date)  # Convert to Date type if not already
# Sort the dataset by the 'Date' column
sorted_date_data <- Ax[order(Ax$Date), ]
# Create time-series object
series <- xts(sorted_date_data$Observation.Value, order.by = sorted_date_data$Date)
str(series)
# Return the time series object
return(series)
#print(names(series))
#print(str(series))
#names(series) <- c("Date", "Variable")
print(series)
}
make_time_series(Ax)
a<make_time_series(Ax)
a<-make_time_series(Ax)
a
a[1]
Ax$Date <- ymd(Ax$Observation.Date)
sorted_date_data <- Ax[order(Ax$Date), ]
series <- xts(sorted_date_data$Observation.Value, order.by = sorted_date_data$Date)
series
colnames(series) <- c("NewName1", "NewName2")
Colnames(series) <- c("NewName1", "NewName2")
class(series)
library(EasyDataR)
library(EasyDataR)
help(package = "EasyDataR")
library(devtools)
use_mit_license()
install.packages("grateful")
library(grateful)
cite_packages(out.dir = ".")
help(package = "EasyDataR")
which git
git --version
library(EasyDataR)
help(package="EasyDataR")
dump("Build_time_series")
dump("build_time_series", file "R/build_time_series.R")
dump("build_time_series", file = "R/build_time_series.R")
devtools::load_all(".")
library(devtools)
library(EasyDataR)
library(EasyDataR)
Easydata_key<- "C10D3D29160CE5693F56AA9846ABB2C438D8B112
""
""
Easydata_key<- "C10D3D29160CE5693F56AA9846ABB2C438D8B112"
session_has_Easydata_key()
get_Easydata_key()
get_info_on_series("TS_GP_IR_REPOMR_D.ORR",8)
WAORR<- download_series("TS_GP_IR_REPOMR_D.ORR",Easydata_key, "2015-05-25" ,"2023-12-20", "csv")
build_time_series(WAORR)
library(EasyDataR)
library(EasyDataR)
Easydata_key<- "C10D3D29160CE5693F56AA9846ABB2C438D8B112"
session_has_Easydata_key()
get_Easydata_key()
get_Easydata_key()
get_info_on_series("TS_GP_IR_REPOMR_D.ORR",8)
WAORR<- download_series("TS_GP_IR_REPOMR_D.ORR",Easydata_key, "2015-05-25" ,"2023-12-20", "csv")
build_time_series(WAORR)
library(EasyDataR)
library(EasyDataR)
devtools::document(".")
devtools::load_all(".")
library(EasyDataR)
library(EasyDataR)
Easydata_key<- "C10D3D29160CE5693F56AA9846ABB2C438D8B112"
session_has_Easydata_key()
get_Easydata_key()
get_info_on_series("TS_GP_IR_REPOMR_D.ORR",8)
WAORR<- download_series("TS_GP_IR_REPOMR_D.ORR",Easydata_key, "2015-05-25" ,"2023-12-20", "csv")
build_time_series(WAORR)
library(EasyDataR)
Easydata_key<- "C10D3D29160CE5693F56AA9846ABB2C438D8B112"
get_Easydata_key()
WAORR<- download_series("TS_GP_IR_REPOMR_D.ORR",Easydata_key, "2015-05-25" ,"2023-12-20", "csv")
build_time_series(WAORR)
plot_time_series(time_series)
time_series<-build_time_series(WAORR)
plot_time_series(time_series)
library(EasyDataR)
Easydata_key<- "C10D3D29160CE5693F56AA9846ABB2C438D8B112"
WAORR<- download_series("TS_GP_IR_REPOMR_D.ORR",Easydata_key, "2015-05-25" ,"2023-12-20", "csv")
build_time_series(WAORR)
plot_time_series(time_series)
time_series
plot.ts(time_series)
?plot.ts
?xts
library(EasyDataR)
Easydata_key<- "C10D3D29160CE5693F56AA9846ABB2C438D8B112"
WAORR<- download_series("TS_GP_IR_REPOMR_D.ORR",Easydata_key, "2015-05-25" ,"2023-12-20", "csv")
build_time_series(WAORR)
plot.ts(time_series)
plot_time_series(time_series)
library(EasyDataR)
Easydata_key<- "C10D3D29160CE5693F56AA9846ABB2C438D8B112"
WAORR<- download_series("TS_GP_IR_REPOMR_D.ORR",Easydata_key, "2015-05-25" ,"2023-12-20", "csv")
build_time_series(WAORR)
plot_time_series(time_series)
library(EasyDataR)
Easydata_key<- "C10D3D29160CE5693F56AA9846ABB2C438D8B112"
WAORR<- download_series("TS_GP_IR_REPOMR_D.ORR",Easydata_key, "2015-05-25" ,"2023-12-20", "csv")
build_time_series(WAORR)
plot_time_series(time_series)
library(EasyDataR)
Easydata_key<- "C10D3D29160CE5693F56AA9846ABB2C438D8B112"
library(EasyDataR)
WAORR<- download_series("TS_GP_IR_REPOMR_D.ORR",Easydata_key, "2015-05-25" ,"2023-12-20", "csv")
build_time_series(WAORR)
plot_time_series(time_series)
library(EasyDataR)
Easydata_key<- "C10D3D29160CE5693F56AA9846ABB2C438D8B112"
WAORR<- download_series("TS_GP_IR_REPOMR_D.ORR",Easydata_key, "2015-05-25" ,"2023-12-20", "csv")
build_time_series(WAORR)
plot_time_series(time_series)
library(EasyDataR)
Easydata_key<- "C10D3D29160CE5693F56AA9846ABB2C438D8B112"
WAORR<- download_series("TS_GP_IR_REPOMR_D.ORR",Easydata_key, "2015-05-25" ,"2023-12-20", "csv")
WAORR<- download_series("TS_GP_IR_REPOMR_D.ORR",Easydata_key, "2015-05-25" ,"2023-12-20", "csv")
build_time_series(WAORR)
plot_time_series(time_series)
library(EasyDataR)
library(EasyDataR)
Easydata_key<- "C10D3D29160CE5693F56AA9846ABB2C438D8B112"
WAORR<- download_series("TS_GP_IR_REPOMR_D.ORR",Easydata_key, "2015-05-25" ,"2023-12-20", "csv")
build_time_series(WAORR)
plot_time_series(time_series)
library(EasyDataR)
Easydata_key<- "C10D3D29160CE5693F56AA9846ABB2C438D8B112"
WAORR<- download_series("TS_GP_IR_REPOMR_D.ORR",Easydata_key, "2015-05-25" ,"2023-12-20", "csv")
build_time_series(WAORR)
plot_time_series(time_series)
ggplot
?ggplot
?aes
library(EasyDataR)
Easydata_key<- "C10D3D29160CE5693F56AA9846ABB2C438D8B112"
WAORR<- download_series("TS_GP_IR_REPOMR_D.ORR",Easydata_key, "2015-05-25" ,"2023-12-20", "csv")
build_time_series(WAORR)
plot_time_series(time_series)
?labs
library(EasyDataR)
Easydata_key<- "C10D3D29160CE5693F56AA9846ABB2C438D8B112"
WAORR<- download_series("TS_GP_IR_REPOMR_D.ORR",Easydata_key, "2015-05-25" ,"2023-12-20", "csv")
build_time_series(WAORR)
plot_time_series(time_series)
